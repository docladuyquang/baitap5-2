{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyOIlV38HK4ZPBVEDFofUBEl",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/docladuyquang/baitap5-2/blob/main/baitap5-2\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "SuDpM_mfmPZ_",
        "outputId": "a5fcf8d8-c996-420a-a55f-412b0bf9750e"
      },
      "outputs": [
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "==================================================\n",
            "MENU THAO TÁC TRÊN DANH SÁCH\n",
            "1. In ra danh sách\n",
            "2. In đảo ngược danh sách\n",
            "3. Sắp xếp danh sách và in ra\n",
            "4. Tìm phần tử lớn nhất và vị trí cuối cùng\n",
            "5. Đếm phần tử có giá trị X và in ra vị trí\n",
            "6. In ra vị trí các phần tử là số nguyên tố\n",
            "7. Tìm các số duy nhất (không trùng lặp)\n",
            "8. Liệt kê giá trị và số lần xuất hiện\n",
            "9. In ra các đoạn con giảm liên tiếp\n",
            "0. Thoát\n",
            "==================================================\n",
            "Danh sách: [42, 59, 79, 59, 10]\n",
            "\n",
            "==================================================\n",
            "MENU THAO TÁC TRÊN DANH SÁCH\n",
            "1. In ra danh sách\n",
            "2. In đảo ngược danh sách\n",
            "3. Sắp xếp danh sách và in ra\n",
            "4. Tìm phần tử lớn nhất và vị trí cuối cùng\n",
            "5. Đếm phần tử có giá trị X và in ra vị trí\n",
            "6. In ra vị trí các phần tử là số nguyên tố\n",
            "7. Tìm các số duy nhất (không trùng lặp)\n",
            "8. Liệt kê giá trị và số lần xuất hiện\n",
            "9. In ra các đoạn con giảm liên tiếp\n",
            "0. Thoát\n",
            "==================================================\n",
            "Danh sách đảo ngược: [10, 59, 79, 59, 42]\n",
            "\n",
            "==================================================\n",
            "MENU THAO TÁC TRÊN DANH SÁCH\n",
            "1. In ra danh sách\n",
            "2. In đảo ngược danh sách\n",
            "3. Sắp xếp danh sách và in ra\n",
            "4. Tìm phần tử lớn nhất và vị trí cuối cùng\n",
            "5. Đếm phần tử có giá trị X và in ra vị trí\n",
            "6. In ra vị trí các phần tử là số nguyên tố\n",
            "7. Tìm các số duy nhất (không trùng lặp)\n",
            "8. Liệt kê giá trị và số lần xuất hiện\n",
            "9. In ra các đoạn con giảm liên tiếp\n",
            "0. Thoát\n",
            "==================================================\n",
            "Danh sách sau khi sắp xếp: [10, 42, 59, 59, 79]\n",
            "\n",
            "==================================================\n",
            "MENU THAO TÁC TRÊN DANH SÁCH\n",
            "1. In ra danh sách\n",
            "2. In đảo ngược danh sách\n",
            "3. Sắp xếp danh sách và in ra\n",
            "4. Tìm phần tử lớn nhất và vị trí cuối cùng\n",
            "5. Đếm phần tử có giá trị X và in ra vị trí\n",
            "6. In ra vị trí các phần tử là số nguyên tố\n",
            "7. Tìm các số duy nhất (không trùng lặp)\n",
            "8. Liệt kê giá trị và số lần xuất hiện\n",
            "9. In ra các đoạn con giảm liên tiếp\n",
            "0. Thoát\n",
            "==================================================\n"
          ]
        }
      ],
      "source": [
        "import random\n",
        "import math\n",
        "\n",
        "def create_random_list(n):\n",
        "    \"\"\"Tạo danh sách ngẫu nhiên với n phần tử có giá trị từ 1 đến 100\"\"\"\n",
        "    return [random.randint(1, 100) for _ in range(n)]\n",
        "\n",
        "def print_list(lst):\n",
        "    \"\"\"In ra danh sách\"\"\"\n",
        "    print(\"Danh sách:\", lst)\n",
        "\n",
        "def print_reverse_list(lst):\n",
        "    \"\"\"In ra danh sách đảo ngược\"\"\"\n",
        "    print(\"Danh sách đảo ngược:\", lst[::-1])\n",
        "\n",
        "def sort_and_print_list(lst):\n",
        "    \"\"\"Sắp xếp và in ra danh sách\"\"\"\n",
        "    sorted_list = sorted(lst)\n",
        "    print(\"Danh sách sau khi sắp xếp:\", sorted_list)\n",
        "    return sorted_list\n",
        "\n",
        "def find_max_element(lst):\n",
        "    \"\"\"Tìm phần tử lớn nhất và vị trí cuối cùng của nó\"\"\"\n",
        "    max_value = max(lst)\n",
        "    # Tìm vị trí cuối cùng của phần tử lớn nhất\n",
        "    last_position = len(lst) - 1 - lst[::-1].index(max_value)\n",
        "    print(f\"Phần tử lớn nhất: {max_value}\")\n",
        "    print(f\"Vị trí cuối cùng: {last_position}\")\n",
        "\n",
        "def count_value(lst, x):\n",
        "    \"\"\"Đếm số lượng phần tử bằng giá trị x và in ra vị trí\"\"\"\n",
        "    positions = [i for i, val in enumerate(lst) if val == x]\n",
        "    count = len(positions)\n",
        "    print(f\"Số lượng phần tử bằng {x}: {count}\")\n",
        "    if count > 0:\n",
        "        print(f\"Vị trí xuất hiện: {positions}\")\n",
        "    else:\n",
        "        print(f\"Không có phần tử nào bằng {x}\")\n",
        "\n",
        "def is_prime(n):\n",
        "    \"\"\"Kiểm tra số n có phải là số nguyên tố không\"\"\"\n",
        "    if n <= 1:\n",
        "        return False\n",
        "    if n <= 3:\n",
        "        return True\n",
        "    if n % 2 == 0 or n % 3 == 0:\n",
        "        return False\n",
        "    i = 5\n",
        "    while i * i <= n:\n",
        "        if n % i == 0 or n % (i + 2) == 0:\n",
        "            return False\n",
        "        i += 6\n",
        "    return True\n",
        "\n",
        "def find_prime_positions(lst):\n",
        "    \"\"\"Tìm vị trí các phần tử là số nguyên tố\"\"\"\n",
        "    prime_positions = [i for i, val in enumerate(lst) if is_prime(val)]\n",
        "    print(\"Vị trí các phần tử là số nguyên tố:\", prime_positions)\n",
        "    print(\"Các số nguyên tố:\", [lst[i] for i in prime_positions])\n",
        "\n",
        "def find_unique_values(lst):\n",
        "    \"\"\"Tìm các số duy nhất (không trùng lặp) trong danh sách\"\"\"\n",
        "    unique_values = []\n",
        "    for num in lst:\n",
        "        if lst.count(num) == 1:\n",
        "            unique_values.append(num)\n",
        "    print(\"Các số duy nhất trong danh sách:\", unique_values)\n",
        "\n",
        "def count_occurrences(lst):\n",
        "    \"\"\"Liệt kê các giá trị và số lần xuất hiện\"\"\"\n",
        "    occurrences = {}\n",
        "    for num in lst:\n",
        "        if num in occurrences:\n",
        "            occurrences[num] += 1\n",
        "        else:\n",
        "            occurrences[num] = 1\n",
        "\n",
        "    print(\"Giá trị và số lần xuất hiện:\")\n",
        "    for value, count in occurrences.items():\n",
        "        print(f\"{value}: {count} lần\")\n",
        "\n",
        "def find_decreasing_subarrays(lst):\n",
        "    \"\"\"In ra các đoạn con giảm liên tiếp\"\"\"\n",
        "    if not lst:\n",
        "        print(\"Danh sách rỗng\")\n",
        "        return\n",
        "\n",
        "    result = []\n",
        "    current_subarray = [lst[0]]\n",
        "\n",
        "    for i in range(1, len(lst)):\n",
        "        if lst[i] < lst[i-1]:  # Nếu phần tử hiện tại nhỏ hơn phần tử trước đó\n",
        "            current_subarray.append(lst[i])\n",
        "        else:\n",
        "            if len(current_subarray) > 1:  # Chỉ in ra các đoạn có độ dài > 1\n",
        "                result.append(current_subarray)\n",
        "            current_subarray = [lst[i]]\n",
        "\n",
        "    # Kiểm tra đoạn cuối cùng\n",
        "    if len(current_subarray) > 1:\n",
        "        result.append(current_subarray)\n",
        "\n",
        "    if result:\n",
        "        print(\"Các đoạn con giảm liên tiếp:\")\n",
        "        for i, subarray in enumerate(result):\n",
        "            print(f\"Đoạn {i+1}: {subarray}\")\n",
        "    else:\n",
        "        print(\"Không có đoạn con giảm liên tiếp nào\")\n",
        "\n",
        "def main():\n",
        "    try:\n",
        "        n = int(input(\"Nhập số lượng phần tử N: \"))\n",
        "        if n <= 0:\n",
        "            print(\"Số lượng phần tử phải lớn hơn 0\")\n",
        "            return\n",
        "\n",
        "        # Tạo danh sách ngẫu nhiên\n",
        "        random_list = create_random_list(n)\n",
        "\n",
        "        while True:\n",
        "            print(\"\\n\" + \"=\"*50)\n",
        "            print(\"MENU THAO TÁC TRÊN DANH SÁCH\")\n",
        "            print(\"1. In ra danh sách\")\n",
        "            print(\"2. In danh sách đảo ngược\")\n",
        "            print(\"3. Sắp xếp danh sách và in ra\")\n",
        "            print(\"4. Tìm phần tử lớn nhất và vị trí cuối cùng\")\n",
        "            print(\"5. Đếm phần tử có giá trị X và in ra vị trí\")\n",
        "            print(\"6. In ra vị trí các phần tử là số nguyên tố\")\n",
        "            print(\"7. Tìm các số duy nhất (không trùng lặp)\")\n",
        "            print(\"8. Liệt kê giá trị và số lần xuất hiện\")\n",
        "            print(\"9. In ra các đoạn con giảm liên tiếp\")\n",
        "            print(\"0. Thoát\")\n",
        "            print(\"=\"*50)\n",
        "\n",
        "            choice = input(\"Nhập lựa chọn của bạn: \")\n",
        "\n",
        "            if choice == '1':\n",
        "                print_list(random_list)\n",
        "            elif choice == '2':\n",
        "                print_reverse_list(random_list)\n",
        "            elif choice == '3':\n",
        "                random_list = sort_and_print_list(random_list)\n",
        "            elif choice == '4':\n",
        "                find_max_element(random_list)\n",
        "            elif choice == '5':\n",
        "                try:\n",
        "                    x = int(input(\"Nhập giá trị X cần tìm: \"))\n",
        "                    count_value(random_list, x)\n",
        "                except ValueError:\n",
        "                    print(\"Vui lòng nhập một số nguyên\")\n",
        "            elif choice == '6':\n",
        "                find_prime_positions(random_list)\n",
        "            elif choice == '7':\n",
        "                find_unique_values(random_list)\n",
        "            elif choice == '8':\n",
        "                count_occurrences(random_list)\n",
        "            elif choice == '9':\n",
        "                find_decreasing_subarrays(random_list)\n",
        "            elif choice == '0':\n",
        "                print(\"Cảm ơn bạn đã sử dụng chương trình!\")\n",
        "                break\n",
        "            else:\n",
        "                print(\"Lựa chọn không hợp lệ. Vui lòng chọn lại!\")\n",
        "\n",
        "    except ValueError:\n",
        "        print(\"Lỗi: Vui lòng nhập một số nguyên cho số lượng phần tử\")\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "    main()"
      ]
    }
  ]
}